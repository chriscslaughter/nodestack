var bitcoin = require('bitcoinjs-lib')

// Let's use the function above to sign a transaction:
// The txHex below was generated by the `createrawsendfrom` RPC call
let txHex = '0200000001b8a7873d892de2930cdb00a6c69dadbe8d553e2bef0688186a71009fd82062460100000000ffffffff028093dc140000000017a914a732060d1955ab93c50c1096597e2ea466b9937d8780d6e34c0000000017a9142d2aad185524b244ef2b2f6a0507d6f187d02fbe8700000000'
let privateKey = 'cU3C1Uu4oN8ZPXrCz55GyjmrsaeoF8UhmBai2d9jzq9iw7ty9EMc'
let privateKey2 = 'cSB1o7v1QBZDHJropQqBYfuiUA4Js1o24uzkgB2vYeND1st5uGqV'

// Read the transaction
var tx = bitcoin.Transaction.fromHex(txHex)
// Load the private key
var keyPair = bitcoin.ECPair.fromWIF(privateKey, bitcoin.networks.testnet)
var keyPair2 = bitcoin.ECPair.fromWIF(privateKey2, bitcoin.networks.testnet)
// ----------------------
// Build the transaction:
// ----------------------
var txb = new bitcoin.TransactionBuilder(bitcoin.networks.testnet)
// Add the inputs
const p2wpkh = bitcoin.payments.p2wpkh({ pubkey: keyPair.publicKey, network: bitcoin.networks.testnet })
const p2sh = bitcoin.payments.p2sh({ redeem: p2wpkh, network: bitcoin.networks.testnet })
tx.ins.forEach(function(value, index){
    txb.addInput(value.hash, value.index)
    console.log(value);
    txb.sign(index, keyPair2, p2sh.redeem.output)
    txb.sign(index, keyPair, p2sh.redeem.output)
})
// Add the outputs
tx.outs.forEach(function(value, index){
    txb.addOutput(value.script, value.index)
})
signed_tx = txb.build().toHex()

console.log('\nSigned transaction using the function:')
console.log(signed_tx)

